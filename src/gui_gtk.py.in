#! /usr/bin/env python
# Creative Commons has made the contents of this file
# available under a CC-GNU-LGPL license:
#
# http://creativecommons.org/licenses/LGPL/2.1/
#
# A copy of the full license can be found as part of this
# distribution in the file COPYING.
# 
# You may use the liblicense software in accordance with the
# terms of that license. You agree that you are solely 
# responsible for your use of the liblicense software and you
# represent and warrant to Creative Commons that your use
# of the liblicense software will comply with the CC-GNU-LGPL.
#
# Copyright 2007, Creative Commons, www.creativecommons.org.
# Copyright 2007, Scott Shawcroft.

import gtk
import gobject
import liblicense

try:
	import gettext
	t = gettext.translation('liblicense')
	_ = t.ugettext
except:
	print "Translations unavailable"
	_ = lambda x: x

icon_location = "@LICENSE_ICON_DIR@"
if icon_location[0]=="@":
    icon_location="/usr/share/liblicense/icons"

attributes = ["http://creativecommons.org/ns#Attribution",
              "http://creativecommons.org/ns#Distribution",
              "http://creativecommons.org/ns#DerivativeWorks",
              "http://creativecommons.org/ns#CommercialUse",
              "http://creativecommons.org/ns#ShareAlike"] 

class LicenseWidget(gtk.VBox):
    __gsignals__ = {"changed":(gobject.SIGNAL_RUN_FIRST,gobject.TYPE_NONE,(gobject.TYPE_STRING,))}
    def __init__(self,license):
        icon_size=48
        icon_padding = 4
        gtk.VBox.__init__(self)
            
        self.set_spacing(5)
        # No license
        box = gtk.HBox()
        box.show()
        self.no_license = gtk.RadioButton(label=_("No License"))
        self.no_license.connect("toggled",self._no_license_cb)
        self.no_license.show()
        box.pack_start(self.no_license)
        
        self.license_below = gtk.RadioButton(self.no_license,_("License selected below"))
        self.license_below.show()
        self.license_below.connect("toggled",self._no_license_cb)
        box.pack_start(self.license_below)
        self.pack_start(box)
        
        # Attribution
        box = gtk.HBox()
        box.show()
        
        self.by = gtk.CheckButton()
        self.by.show()

        icon = gtk.Image()
        icon.set_from_pixbuf(gtk.gdk.pixbuf_new_from_file_at_size(icon_location + "/by.svg", icon_size, icon_size))
        icon.show()
        box.pack_start(icon,False,False,icon_padding)

        label = gtk.Label(_("Require Attribution"))
        label.show()
        box.pack_start(label,False,False,10)

        self.by.add(box)
        self.pack_start(self.by)
        
        # Allow Sharing
        box = gtk.HBox()
        box.show()
        
        self.ash = gtk.CheckButton()
        self.ash.show()
        
        icon = gtk.Image()
        icon.set_from_pixbuf(gtk.gdk.pixbuf_new_from_file_at_size(icon_location+"/ash.svg", icon_size, icon_size))
        icon.show()
        box.pack_start(icon,False,False,icon_padding)
        
        label = gtk.Label(_("Allow Sharing"))
        label.show()
        box.pack_start(label,False,False,10)

        self.ash.add(box)
        self.pack_start(self.ash)
        
        # Allow Remixing
        box = gtk.HBox()
        box.show()
        
        self.ar = gtk.CheckButton()
        self.ar.show()
        self.ar.connect("toggled",self.ar_toggled)
        
        icon = gtk.Image()
        icon.set_from_pixbuf(gtk.gdk.pixbuf_new_from_file_at_size(icon_location + "/ar.svg", icon_size, icon_size))
        icon.show()
        box.pack_start(icon,False,False,icon_padding)
        
        label = gtk.Label(_("Allow Remixing"))
        label.show()
        box.pack_start(label,False,False,10)

        self.ar.add(box)
        self.pack_start(self.ar)
        
        # Prohibit Commercial Works
        box = gtk.HBox()
        box.show()
        
        self.pcw = gtk.CheckButton()
        self.pcw.show()
        
        icon = gtk.Image()
        icon.set_from_pixbuf(gtk.gdk.pixbuf_new_from_file_at_size(icon_location + "/pcw.svg", icon_size, icon_size))
        icon.show()
        box.pack_start(icon,False,False,icon_padding)
        
        label = gtk.Label(_("Prohibit Commercial Works"))
        label.show()
        box.pack_start(label,False,False,10)

        self.pcw.add(box)
        self.pack_start(self.pcw)
        
        # Require Others to Share-Alike
        box = gtk.HBox()
        box.show()
        
        self.sa = gtk.CheckButton()
        self.sa.show()
        
        icon = gtk.Image()
        icon.set_from_pixbuf(gtk.gdk.pixbuf_new_from_file_at_size(icon_location + "/sa.svg", icon_size, icon_size))
        icon.show()
        box.pack_start(icon,False,False,icon_padding)
        
        label = gtk.Label(_("Require Others to Share-Alike"))
        label.show()
        box.pack_start(label,False,False,10)

        self.sa.add(box)
        self.pack_start(self.sa)

        # License and URI
        hbox = gtk.HBox()
        hbox.show()
        
        box = gtk.VBox()
        box.show()
        box.set_spacing(10)
        hbox.pack_start(box,False,False,5)
       
        empty_box = gtk.VBox()
        empty_box.show()
        empty_box.set_size_request(10,20)
        box.pack_start(empty_box)
        
        self.license_label = gtk.Label(_("License:"))
        self.license_label.show()
        box.pack_start(self.license_label,False,False)
        
        self.jurisdiction_label = gtk.Label(_("Jurisdiction:"))
        self.jurisdiction_label.show()
        box.pack_start(self.jurisdiction_label,False,False)
        
        self.uri_label = gtk.Label(_("License URI:"))
        self.uri_label.show()
        box.pack_start(self.uri_label,False,False)
        
        box = gtk.VBox()
        box.show()
        #Warning
        wbox = gtk.HBox()
        wbox.show()
        wbox.set_size_request(110,30)

        self.warning = gtk.EventBox()
        self.warning.modify_bg(gtk.STATE_NORMAL,gtk.gdk.color_parse("#FFFF00"))
        self.warning.set_visible_window(True)

        hbox_tmp = gtk.HBox()
        hbox_tmp.show()
        self.warning.add(hbox_tmp)
        
        icon = gtk.Image()
        icon.set_from_stock(gtk.STOCK_DIALOG_WARNING,gtk.ICON_SIZE_LARGE_TOOLBAR)
        hbox_tmp.pack_start(icon,False,False,10)
        icon.show()
        label = gtk.Label()
        label.set_markup("<b>"+_("WARNING: ")+"</b>"+_("No such license exists."))
        hbox_tmp.pack_start(label,False,False,10)
        label.show()
        wbox.pack_start(self.warning,True,True,0)
        box.pack_start(wbox)

        #license
        self.license = gtk.ComboBox()
        cell = gtk.CellRendererText()
        self.license.pack_start(cell, True)
        self.license.add_attribute(cell, 'text', 1)
        self.license.show()
        self.license.connect("changed",self._combobox_license_cb)
        box.pack_start(self.license)
        
        #jurisdiction
        self.jurisdictions = gtk.ListStore(str,str,gtk.gdk.Pixbuf)
        self.jurisdiction = gtk.ComboBox(self.jurisdictions)
        cell = gtk.CellRendererPixbuf()
        self.jurisdiction.pack_start(cell, False)
        self.jurisdiction.add_attribute(cell, 'pixbuf', 2)
        cell = gtk.CellRendererText()
        self.jurisdiction.pack_start(cell, True)
        self.jurisdiction.add_attribute(cell, 'text', 1)

        self._j = liblicense.get_jurisdictions()
        for juris in self._j:
            self.jurisdictions.append([juris,_(liblicense.jurisdiction_name(juris)),gtk.gdk.pixbuf_new_from_file_at_size(icon_location + "/"+juris+".png",27,16)])
        self._j[0] = None #refer to unported as None

        self.jurisdiction.show()
        
        box.pack_start(self.jurisdiction,False,False,0)

        self.uri = gtk.Entry()
        self.uri.set_editable(False)
        self.uri.show()

        box.pack_start(self.uri)
        self.label = label
        self.icon = icon

        hbox.pack_start(box)
        self.pack_start(hbox)

        self.set_license(license)
        self.set_size_request(450,-1)
        
        # hook up license switcher
        self.by.connect("toggled",self.checkbox_toggled,0)
        self.ash.connect("toggled",self.checkbox_toggled,1)
        self.ar.connect("toggled",self.checkbox_toggled,2)
        self.pcw.connect("toggled",self.checkbox_toggled,3)
        self.sa.connect("toggled",self.checkbox_toggled,4)
        
        self.jurisdiction.connect("changed",self.update_jurisdiction)

    def update_checkboxes(self,license):
        if license:
            self.current_flags= list(self.license_flags(license))
        else:
            self.current_flags=[False,False,False,False,False]
        self.by.set_active(self.current_flags[0])
        self.ash.set_active(self.current_flags[1])
        self.ar.set_active(self.current_flags[2])
        self.ar.toggled()
        self.pcw.set_active(self.current_flags[3])
        self.sa.set_active(self.current_flags[4])
        

    def ar_toggled(self,button):
        self.sa.set_sensitive(button.get_active())
        if not button.get_active():
            self.sa.set_active(False)
            self.sa.toggled()
    
    def checkbox_toggled(self,button,flag):
        self.current_flags[flag] = button.get_active()
        self.update_license()
    
    def update_license(self):
        licenses = self.ll_chooser.get_licenses(
          permits=(self.current_flags[1]<<1)|(self.current_flags[2]<<2),
          requires=(self.current_flags[0]<<0)|(self.current_flags[4]<<4),
          prohibits=(self.current_flags[3]<<3))

        if licenses:
            self.warning.hide()
            u = licenses[0]
            self.uri.set_text(u)
            liststore = gtk.ListStore(gobject.TYPE_STRING,gobject.TYPE_STRING)
            self.license.set_model(liststore)
            for u in licenses:
                v = liblicense.get_version(u)
                if v:
                  version = " - "+".".join(map(str,v))
                else:
                  version = ""
                liststore.append((u,("%s%s" % (liblicense.get_name(u), version))))
            self.license.props.sensitive = True
            self.license.set_model(liststore)
            self.license.set_active(0)
        else:
            self.warning.show()
            self.uri.set_text("")
            liststore = gtk.ListStore(gobject.TYPE_STRING,gobject.TYPE_STRING)
            self.license.set_model(liststore)
            self.license.props.sensitive = False

    def update_chooser(self, license=None):
        j = self.jurisdictions[self.jurisdiction.get_active()][0]
        self.ll_chooser = liblicense.LicenseChooser(j,attributes)
    
    def license_flags(self,license):
        permits = liblicense.get_permits(license)
        requires = liblicense.get_requires(license)
        prohibits = liblicense.get_prohibits(license)
        return (attributes[0] in requires,
                attributes[1] in permits,
                attributes[2] in permits,
                attributes[3] in prohibits,
                attributes[4] in requires)
    
    def update_jurisdiction(self, widget):
        self.update_chooser()
        self.update_license()
    
    def set_license(self, license):
        if license and liblicense.verify_uri(license):
            self.jurisdiction.set_active(self._j.index(liblicense.get_jurisdiction(license)))
            self.update_chooser()
            self.update_checkboxes(license)
            self.update_license()
            license_list = self.license.get_model()
            for i in range(len(license_list)):
                if license_list[i][0]==license:
                    self.license.set_active(i)
                    break
            
            self.uri.set_text(license)

            self.license_below.props.active = True
            self.license_below.toggled()
        else:
            self.license.props.sensitive = False
            self.jurisdiction.set_active(0)
            self.update_chooser()
            self.update_checkboxes(license)
            license=None
            self.no_license.props.active = True
            self.no_license.toggled()

    def get_license(self):
        if self.no_license.props.active:
            return None
        return self.uri.get_text()
    
    def _no_license_cb(self,widget):
        if widget.props.active:
            self.by.set_sensitive(self.license_below.props.active)
            self.ash.set_sensitive(self.license_below.props.active)
            self.ar.set_sensitive(self.license_below.props.active)
            self.pcw.set_sensitive(self.license_below.props.active)
            self.sa.set_sensitive(self.license_below.props.active)
            self.uri.set_sensitive(self.license_below.props.active)
            self.jurisdiction.set_sensitive(self.license_below.props.active)
            self.license.set_sensitive(self.license_below.props.active)
            self.uri_label.set_sensitive(self.license_below.props.active)
            self.license_label.set_sensitive(self.license_below.props.active)
            self.jurisdiction_label.set_sensitive(self.license_below.props.active)
            self.warning.set_sensitive(self.license_below.props.active)
            if widget==self.no_license:
                self.emit("changed",None)
            elif widget==self.license_below:
                self.emit("changed",self.get_license())
     
    def _combobox_license_cb(self,combobox):
        active = combobox.get_active()     
        model = combobox.get_model()
        license = model[active][0]
        self.uri.set_text(license)
        self.emit("changed",license)

if __name__=="__main__":
    import sys
    def close(window):
        sys.exit(0)
    def changed(widget,uri):
        print "changed: " + str(uri)
    window = gtk.Window()
    window.connect("destroy",close)
    window.set_title("liblicense widget test")
    if len(sys.argv)>1:
        widget = LicenseWidget(liblicense.read(sys.argv[1]))
    else:
        widget = LicenseWidget(liblicense.get_default())
    widget.connect("changed",changed)
    widget.show()
    window.add(widget)
    window.show()
    gtk.main()
